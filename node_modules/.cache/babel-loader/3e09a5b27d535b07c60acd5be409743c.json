{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"buttonCss\", \"spacing\", \"autoFocus\", \"isDisabled\", \"shouldFitContainer\", \"isSelected\", \"iconBefore\", \"iconAfter\", \"children\", \"className\", \"href\", \"overlay\", \"tabIndex\", \"type\", \"onMouseDown\", \"onClick\", \"component\", \"testId\", \"analyticsContext\"];\n/** @jsx jsx */\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';\nimport { N500 } from '@atlaskit/theme/colors';\nimport blockEvents from './block-events';\nimport { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';\n\nfunction noop() {} // Disabled buttons will still publish events for nested elements in webkit.\n// We are disabling pointer events on child elements so that\n// the button will always be the target of events\n// Note: firefox does not have this behaviour for child elements\n\n\nvar noPointerEventsOnChildrenCss = {\n  '> *': {\n    pointerEvents: 'none'\n  }\n};\nexport default /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      buttonCss = props.buttonCss,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'default' : _props$spacing,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$shouldFitConta = props.shouldFitContainer,\n      shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,\n      _props$isSelected = props.isSelected,\n      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,\n      iconBefore = props.iconBefore,\n      iconAfter = props.iconAfter,\n      children = props.children,\n      className = props.className,\n      href = props.href,\n      overlay = props.overlay,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      _props$type = props.type,\n      type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,\n      _props$onMouseDown = props.onMouseDown,\n      providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,\n      _props$onClick = props.onClick,\n      providedOnClick = _props$onClick === void 0 ? noop : _props$onClick,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,\n      testId = props.testId,\n      analyticsContext = props.analyticsContext,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var ourRef = useRef();\n  var setRef = useCallback(function (node) {\n    ourRef.current = node;\n\n    if (ref == null) {\n      return;\n    }\n\n    if (typeof ref === 'function') {\n      ref(node);\n      return;\n    } // @ts-ignore\n\n\n    ref.current = node;\n  }, [ourRef, ref]); // Cross browser auto focusing is pretty broken, so we are doing it ourselves\n\n  useAutoFocus(ourRef, autoFocus);\n  var onClick = usePlatformLeafEventHandler({\n    fn: providedOnClick,\n    action: 'clicked',\n    componentName: 'button',\n    packageName: \"@atlaskit/button\",\n    packageVersion: \"16.2.0\",\n    analyticsData: analyticsContext\n  }); // Button currently calls preventDefault, which is not standard button behaviour\n\n  var onMouseDown = useCallback(function (event) {\n    event.preventDefault();\n    providedOnMouseDown(event);\n  }, [providedOnMouseDown]); // Lose focus when becoming disabled (standard button behaviour)\n\n  useEffect(function () {\n    var el = ourRef.current;\n\n    if (isDisabled && el && el === document.activeElement) {\n      el.blur();\n    }\n  }, [isDisabled]); // we are 'disabling' input with a button when there is an overlay\n\n  var hasOverlay = Boolean(overlay);\n  var fadeCss = getFadingCss({\n    hasOverlay: hasOverlay\n  });\n  var isInteractive = !isDisabled && !hasOverlay;\n  /** HACK: Spinner needs to have different colours in the \"new\" tokens design compared to the old design.\n   * For now, while we support both, these styles reach into Spinner when a theme is set, applies the right color.\n   * Ticket to remove: https://product-fabric.atlassian.net/browse/DSP-2067\n   */\n\n  var spinnerHackCss = {};\n\n  if (isSelected || isDisabled || appearance === 'warning') {\n    spinnerHackCss = {\n      '[data-theme] & svg': {\n        stroke: isSelected || isDisabled ? \"var(--ds-text-subtle, \".concat(N500, \")\") : \"var(--ds-text-warning-inverse, \".concat(N500, \")\")\n      }\n    };\n  }\n\n  return jsx(Component, _extends({}, rest, {\n    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],\n    className: className,\n    ref: setRef,\n    onClick: onClick,\n    onMouseDown: onMouseDown,\n    disabled: isDisabled,\n    href: isInteractive ? href : undefined // using undefined so that the property doesn't exist when false\n    ,\n    \"data-has-overlay\": hasOverlay ? true : undefined,\n    \"data-testid\": testId,\n    type: type // Adding a tab index so element is always focusable, even when not a <button> or <a>\n    // Disabling focus via keyboard navigation when disabled\n    // as this is standard button behaviour\n    ,\n    tabIndex: isDisabled ? -1 : tabIndex\n  }, blockEvents({\n    isInteractive: isInteractive\n  })), iconBefore ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconBefore) : null, children ? jsx(\"span\", {\n    css: [fadeCss, getContentStyle({\n      spacing: spacing\n    })]\n  }, children) : null, iconAfter ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconAfter) : null, overlay ? jsx(\"span\", {\n    css: [overlayCss, spinnerHackCss]\n  }, overlay) : null);\n});","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/node_modules/@atlaskit/button/dist/esm/shared/button-base.js"],"names":["_extends","_objectWithoutProperties","_excluded","React","useCallback","useEffect","useRef","jsx","usePlatformLeafEventHandler","useAutoFocus","N500","blockEvents","getContentStyle","getFadingCss","getIconStyle","overlayCss","noop","noPointerEventsOnChildrenCss","pointerEvents","forwardRef","ButtonBase","props","ref","_props$appearance","appearance","buttonCss","_props$spacing","spacing","_props$autoFocus","autoFocus","_props$isDisabled","isDisabled","_props$shouldFitConta","shouldFitContainer","_props$isSelected","isSelected","iconBefore","iconAfter","children","className","href","overlay","_props$tabIndex","tabIndex","_props$type","type","undefined","_props$onMouseDown","onMouseDown","providedOnMouseDown","_props$onClick","onClick","providedOnClick","_props$component","component","Component","testId","analyticsContext","rest","ourRef","setRef","node","current","fn","action","componentName","packageName","packageVersion","analyticsData","event","preventDefault","el","document","activeElement","blur","hasOverlay","Boolean","fadeCss","isInteractive","spinnerHackCss","stroke","concat","css","disabled"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"appearance\", \"buttonCss\", \"spacing\", \"autoFocus\", \"isDisabled\", \"shouldFitContainer\", \"isSelected\", \"iconBefore\", \"iconAfter\", \"children\", \"className\", \"href\", \"overlay\", \"tabIndex\", \"type\", \"onMouseDown\", \"onClick\", \"component\", \"testId\", \"analyticsContext\"];\n\n/** @jsx jsx */\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';\nimport { N500 } from '@atlaskit/theme/colors';\nimport blockEvents from './block-events';\nimport { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';\n\nfunction noop() {} // Disabled buttons will still publish events for nested elements in webkit.\n// We are disabling pointer events on child elements so that\n// the button will always be the target of events\n// Note: firefox does not have this behaviour for child elements\n\n\nvar noPointerEventsOnChildrenCss = {\n  '> *': {\n    pointerEvents: 'none'\n  }\n};\nexport default /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      buttonCss = props.buttonCss,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'default' : _props$spacing,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$shouldFitConta = props.shouldFitContainer,\n      shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,\n      _props$isSelected = props.isSelected,\n      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,\n      iconBefore = props.iconBefore,\n      iconAfter = props.iconAfter,\n      children = props.children,\n      className = props.className,\n      href = props.href,\n      overlay = props.overlay,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      _props$type = props.type,\n      type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,\n      _props$onMouseDown = props.onMouseDown,\n      providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,\n      _props$onClick = props.onClick,\n      providedOnClick = _props$onClick === void 0 ? noop : _props$onClick,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,\n      testId = props.testId,\n      analyticsContext = props.analyticsContext,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var ourRef = useRef();\n  var setRef = useCallback(function (node) {\n    ourRef.current = node;\n\n    if (ref == null) {\n      return;\n    }\n\n    if (typeof ref === 'function') {\n      ref(node);\n      return;\n    } // @ts-ignore\n\n\n    ref.current = node;\n  }, [ourRef, ref]); // Cross browser auto focusing is pretty broken, so we are doing it ourselves\n\n  useAutoFocus(ourRef, autoFocus);\n  var onClick = usePlatformLeafEventHandler({\n    fn: providedOnClick,\n    action: 'clicked',\n    componentName: 'button',\n    packageName: \"@atlaskit/button\",\n    packageVersion: \"16.2.0\",\n    analyticsData: analyticsContext\n  }); // Button currently calls preventDefault, which is not standard button behaviour\n\n  var onMouseDown = useCallback(function (event) {\n    event.preventDefault();\n    providedOnMouseDown(event);\n  }, [providedOnMouseDown]); // Lose focus when becoming disabled (standard button behaviour)\n\n  useEffect(function () {\n    var el = ourRef.current;\n\n    if (isDisabled && el && el === document.activeElement) {\n      el.blur();\n    }\n  }, [isDisabled]); // we are 'disabling' input with a button when there is an overlay\n\n  var hasOverlay = Boolean(overlay);\n  var fadeCss = getFadingCss({\n    hasOverlay: hasOverlay\n  });\n  var isInteractive = !isDisabled && !hasOverlay;\n  /** HACK: Spinner needs to have different colours in the \"new\" tokens design compared to the old design.\n   * For now, while we support both, these styles reach into Spinner when a theme is set, applies the right color.\n   * Ticket to remove: https://product-fabric.atlassian.net/browse/DSP-2067\n   */\n\n  var spinnerHackCss = {};\n\n  if (isSelected || isDisabled || appearance === 'warning') {\n    spinnerHackCss = {\n      '[data-theme] & svg': {\n        stroke: isSelected || isDisabled ? \"var(--ds-text-subtle, \".concat(N500, \")\") : \"var(--ds-text-warning-inverse, \".concat(N500, \")\")\n      }\n    };\n  }\n\n  return jsx(Component, _extends({}, rest, {\n    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],\n    className: className,\n    ref: setRef,\n    onClick: onClick,\n    onMouseDown: onMouseDown,\n    disabled: isDisabled,\n    href: isInteractive ? href : undefined // using undefined so that the property doesn't exist when false\n    ,\n    \"data-has-overlay\": hasOverlay ? true : undefined,\n    \"data-testid\": testId,\n    type: type // Adding a tab index so element is always focusable, even when not a <button> or <a>\n    // Disabling focus via keyboard navigation when disabled\n    // as this is standard button behaviour\n    ,\n    tabIndex: isDisabled ? -1 : tabIndex\n  }, blockEvents({\n    isInteractive: isInteractive\n  })), iconBefore ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconBefore) : null, children ? jsx(\"span\", {\n    css: [fadeCss, getContentStyle({\n      spacing: spacing\n    })]\n  }, children) : null, iconAfter ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconAfter) : null, overlay ? jsx(\"span\", {\n    css: [overlayCss, spinnerHackCss]\n  }, overlay) : null);\n});"]},"metadata":{},"sourceType":"module"}