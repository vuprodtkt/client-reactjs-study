{"ast":null,"code":"import { dimensions } from '../constants';\nimport { css } from '@emotion/core';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  }\n};\nvar smallStyles = css(dimensions.small);\nvar mediumStyles = css(dimensions.medium);\nvar largeStyles = css(dimensions.large);\nvar xlargeStyles = css(dimensions.xlarge); // pre-built css style-size map\n\nexport var sizeStyleMap = {\n  small: smallStyles,\n  medium: mediumStyles,\n  large: largeStyles,\n  xlarge: xlargeStyles\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      size = _ref.size;\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (size) {\n    return dimensions[size];\n  }\n\n  return undefined;\n};","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/node_modules/@atlaskit/icon/dist/esm/components/styles.js"],"names":["dimensions","css","commonSVGStyles","overflow","pointerEvents","stop","stopColor","smallStyles","small","mediumStyles","medium","largeStyles","large","xlargeStyles","xlarge","sizeStyleMap","getIconSize","_ref","width","height","size","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAO,IAAIC,eAAe,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,QADiB;AAE3BC,EAAAA,aAAa,EAAE,MAFY;;AAI3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AATqB,CAAtB;AAaP,IAAIC,WAAW,GAAGN,GAAG,CAACD,UAAU,CAACQ,KAAZ,CAArB;AACA,IAAIC,YAAY,GAAGR,GAAG,CAACD,UAAU,CAACU,MAAZ,CAAtB;AACA,IAAIC,WAAW,GAAGV,GAAG,CAACD,UAAU,CAACY,KAAZ,CAArB;AACA,IAAIC,YAAY,GAAGZ,GAAG,CAACD,UAAU,CAACc,MAAZ,CAAtB,C,CAA2C;;AAE3C,OAAO,IAAIC,YAAY,GAAG;AACxBP,EAAAA,KAAK,EAAED,WADiB;AAExBG,EAAAA,MAAM,EAAED,YAFgB;AAGxBG,EAAAA,KAAK,EAAED,WAHiB;AAIxBG,EAAAA,MAAM,EAAED;AAJgB,CAAnB;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIG,WAAW,GAAG,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAClD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,IAAI,GAAGH,IAAI,CAACG,IAFhB;;AAIA,MAAIF,KAAK,IAAIC,MAAb,EAAqB;AACnB,WAAO;AACLD,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,MAAM,EAAEA;AAFH,KAAP;AAID;;AAED,MAAIC,IAAJ,EAAU;AACR,WAAOpB,UAAU,CAACoB,IAAD,CAAjB;AACD;;AAED,SAAOC,SAAP;AACD,CAjBM","sourcesContent":["import { dimensions } from '../constants';\nimport { css } from '@emotion/core';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  }\n};\nvar smallStyles = css(dimensions.small);\nvar mediumStyles = css(dimensions.medium);\nvar largeStyles = css(dimensions.large);\nvar xlargeStyles = css(dimensions.xlarge); // pre-built css style-size map\n\nexport var sizeStyleMap = {\n  small: smallStyles,\n  medium: mediumStyles,\n  large: largeStyles,\n  xlarge: xlargeStyles\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      size = _ref.size;\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (size) {\n    return dimensions[size];\n  }\n\n  return undefined;\n};"]},"metadata":{},"sourceType":"module"}