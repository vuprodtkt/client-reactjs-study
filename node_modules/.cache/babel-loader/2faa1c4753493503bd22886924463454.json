{"ast":null,"code":"var _jsxFileName = \"E:\\\\subjects\\\\ReactJS\\\\ReactJS\\\\example\\\\study\\\\client\\\\src\\\\Components\\\\Content\\\\study\\\\StudyPlay.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Answer from './Answer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction StudyPlay(_ref) {\n  _s();\n\n  let {\n    numVocab,\n    numGrammar,\n    vocabularyList,\n    grammarList\n  } = _ref;\n  const [count, setCount] = useState(1);\n  const [isShowAnswer, setIsShowAnswer] = useState(false);\n  const [question, setQuestion] = useState([]); // let question = []\n\n  let total = numVocab + numGrammar;\n  let verbTypeList = [\"V-ing\", \"to + V1\", \"V1\", \"v3/ed\", \"v2\"];\n\n  const formatType = type => {\n    if (type === \"Danh từ\") {\n      return \"(n)\";\n    } else if (type === \"Động từ\") {\n      return \"(v)\";\n    } else if (type === \"Tính từ\") {\n      return \"(adj)\";\n    } else if (type === \"Trạng từ\") {\n      return \"(adv)\";\n    }\n  };\n\n  const onClickAnswer = () => {};\n\n  useEffect(() => {\n    getVocabularyQuestion();\n    getGrammarQuestion();\n  }, []);\n\n  const getVocabularyQuestion = () => {\n    for (let i = 0; i < numVocab; i++) {\n      let rand = Math.floor(Math.random() * vocabularyList.length);\n      let numTrueAnswer = Math.floor(Math.random() * 4);\n      let answerList = [];\n\n      for (let j = 0; j < 4; j++) {\n        if (j === numTrueAnswer) {\n          answerList[j] = vocabularyList[rand].means;\n        } else {\n          let check = true;\n\n          while (check) {\n            let rand1 = Math.floor(Math.random() * vocabularyList.length);\n            check = answerList.filter(answer => answer === vocabularyList[rand1].means).length === 0 && rand1 !== rand ? false : true;\n\n            if (!check) {\n              answerList[j] = vocabularyList[rand1].means;\n            }\n          }\n        }\n      }\n\n      let questionItem = {\n        question: vocabularyList[rand].name + \" \" + formatType(vocabularyList[rand].type),\n        answer: numTrueAnswer,\n        answerList: answerList\n      };\n      setQuestion(prev => [...prev, questionItem]); // question.push(questionItem);\n    }\n  };\n\n  const getGrammarQuestion = () => {\n    for (let i = 0; i < numGrammar; i++) {\n      let rand = Math.floor(Math.random() * grammarList.length);\n      let numTrueAnswer = Math.floor(Math.random() * 4);\n      let answerList = [];\n\n      for (let j = 0; j < 4; j++) {\n        if (j === numTrueAnswer) {\n          answerList[j] = grammarList[rand].verbType;\n        } else {\n          let check = true;\n\n          while (check) {\n            let rand1 = Math.floor(Math.random() * verbTypeList.length);\n            check = answerList.filter(answer => answer.toLowerCase() === verbTypeList[rand1].toLowerCase()).length === 0 && rand1 !== rand ? false : true;\n\n            if (!check) {\n              answerList[j] = verbTypeList[rand1].toLowerCase();\n            }\n          }\n        }\n      }\n\n      let questionItem = {\n        question: grammarList[rand].name,\n        answer: numTrueAnswer,\n        answerList: answerList\n      }; // question.push(questionItem);\n\n      setQuestion(prev => [...prev, questionItem]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body p-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title p-3 m-0 rounded-top bg-primary\",\n          style: {\n            color: \"#ffffff\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"col-md-1 m-0 d-inline-block\",\n            children: \"C\\xE2u h\\u1ECFi:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-10 text-center d-inline-block\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"d-inline-block m-0\",\n              children: [count, \"/\", total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-top-0 rounded-0 text-center\",\n          style: {\n            minHeight: 80 + \"px\",\n            padding: 20 + \"px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"m-0\",\n            children: question.length !== 0 ? question[count - 1].question : \"empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body p-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row m-0\",\n          children: question.length !== 0 ? question[count - 1].answerList.map((answer, index) => /*#__PURE__*/_jsxDEV(Answer, {\n            answer: answer,\n            onClickAnswer: onClickAnswer,\n            isShowAnswer: isShowAnswer\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 98\n          }, this)) : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StudyPlay, \"VltQYLVY5k9NBVP2StpDev0j5CA=\");\n\n_c = StudyPlay;\nexport default StudyPlay;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudyPlay\");","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/src/Components/Content/study/StudyPlay.js"],"names":["useEffect","useState","Answer","StudyPlay","numVocab","numGrammar","vocabularyList","grammarList","count","setCount","isShowAnswer","setIsShowAnswer","question","setQuestion","total","verbTypeList","formatType","type","onClickAnswer","getVocabularyQuestion","getGrammarQuestion","i","rand","Math","floor","random","length","numTrueAnswer","answerList","j","means","check","rand1","filter","answer","questionItem","name","prev","verbType","toLowerCase","color","minHeight","padding","map","index"],"mappings":"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","sourcesContent":["\r\nimport { useEffect, useState } from 'react';\r\nimport Answer from './Answer';\r\n\r\nfunction StudyPlay({numVocab,numGrammar,vocabularyList,grammarList}) {\r\n    const [count,setCount] = useState(1);\r\n    const [isShowAnswer,setIsShowAnswer] = useState(false);\r\n    const [question,setQuestion] = useState([]);\r\n    // let question = []\r\n    let total = numVocab + numGrammar;\r\n\r\n    let verbTypeList = [\"V-ing\", \"to + V1\", \"V1\", \"v3/ed\",\"v2\"];\r\n\r\n    const formatType = (type) =>{\r\n        if(type === \"Danh từ\"){\r\n            return \"(n)\";\r\n        }\r\n        else if(type === \"Động từ\"){\r\n            return \"(v)\";\r\n        }\r\n        else if(type === \"Tính từ\"){\r\n            return \"(adj)\";\r\n        }\r\n        else if(type === \"Trạng từ\"){\r\n            return \"(adv)\";\r\n        }\r\n    }\r\n\r\n    const onClickAnswer = () => {\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n        getVocabularyQuestion();\r\n        getGrammarQuestion();\r\n    },[])\r\n\r\n    const getVocabularyQuestion = () => {\r\n        for(let i = 0;i< numVocab;i++){\r\n            let rand = Math.floor(Math.random() * vocabularyList.length);\r\n    \r\n            let numTrueAnswer = Math.floor(Math.random() * 4);\r\n            let answerList = []\r\n            for(let j = 0;j<4;j++){\r\n                if (j === numTrueAnswer){\r\n                    answerList[j] = vocabularyList[rand].means;\r\n                }else{\r\n                    let check = true;\r\n                    while(check){\r\n                        let rand1 = Math.floor(Math.random() * vocabularyList.length);\r\n                        check = answerList.filter(answer => answer === vocabularyList[rand1].means).length === 0 && rand1 !== rand ? false:true;\r\n    \r\n                        if(!check){\r\n                            answerList[j] = vocabularyList[rand1].means;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let questionItem = {\r\n                question: vocabularyList[rand].name + \" \" + formatType(vocabularyList[rand].type),\r\n                answer: numTrueAnswer,\r\n                answerList: answerList\r\n            }\r\n            setQuestion(prev => [...prev,questionItem]);\r\n            // question.push(questionItem);\r\n        }\r\n    }\r\n    const getGrammarQuestion = () => {\r\n        for(let i = 0;i< numGrammar;i++){\r\n            let rand = Math.floor(Math.random() * grammarList.length);\r\n    \r\n            let numTrueAnswer = Math.floor(Math.random() * 4);\r\n            let answerList = []\r\n            for(let j = 0;j<4;j++){\r\n                if (j === numTrueAnswer){\r\n                    answerList[j] = grammarList[rand].verbType;\r\n                }else{\r\n                    let check = true;\r\n                    while(check){\r\n                        let rand1 = Math.floor(Math.random() * verbTypeList.length);\r\n                        check = answerList.filter(answer => answer.toLowerCase() === verbTypeList[rand1].toLowerCase()).length === 0 && rand1 !== rand ? false:true;\r\n    \r\n                        if(!check){\r\n                            answerList[j] = verbTypeList[rand1].toLowerCase();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            let questionItem = {\r\n                question: grammarList[rand].name,\r\n                answer: numTrueAnswer,\r\n                answerList: answerList\r\n            }\r\n            // question.push(questionItem);\r\n            setQuestion(prev => [...prev,questionItem]);\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <>\r\n        <div className=\"card\">\r\n            <div className=\"card-body p-0\">\r\n                <h5 className=\"card-title p-3 m-0 rounded-top bg-primary\" style={{color:\"#ffffff\"}}>\r\n                    <p className=\"col-md-1 m-0 d-inline-block\">Câu hỏi:</p>\r\n                    <div className=\"col-md-10 text-center d-inline-block\">\r\n                        <p className=\"d-inline-block m-0\">{count}/{total}</p>\r\n                    </div>\r\n                    \r\n                </h5>\r\n                <div className=\"border-top-0 rounded-0 text-center\" style={{minHeight: 80 + \"px\",padding: 20 + \"px\"}}>\r\n                    <h3 className=\"m-0\">{question.length !== 0?question[count-1].question:\"empty\"}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"card\">\r\n            <div className=\"card-body p-3\">\r\n                <div className=\"row m-0\">\r\n                    {question.length !== 0? question[count - 1].answerList.map((answer,index) => <Answer key={index} answer = {answer} onClickAnswer = {onClickAnswer} isShowAnswer = {isShowAnswer} />) : \"\"}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n     );\r\n}\r\n\r\nexport default StudyPlay;"]},"metadata":{},"sourceType":"module"}