{"ast":null,"code":"var _jsxFileName = \"E:\\\\subjects\\\\ReactJS\\\\ReactJS\\\\example\\\\study\\\\client\\\\src\\\\Components\\\\Content\\\\study\\\\Answer.js\";\nimport Button from '@atlaskit/button';\nimport styled, { css } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ButtonConfig = styled.button`\n    background-color: ${p => p.isShowAnswer ? p.isClick ? p.isAnswer ? \"blue\" : \"red\" : p.isAnswer ? \"blue\" : \"white\" : \"white\"};\n    height: 100px;\n    width: 100%;\n    box-shadow: 1px 1px 8px;\n    padding: 30px;\n    border-radius: 10px;\n\n    &:hover{\n        background-color: #d6d6d6;\n    }\n`;\n_c = ButtonConfig;\n\nfunction Answer(_ref) {\n  let {\n    index,\n    question,\n    count,\n    setCount,\n    isShowAnswer,\n    setIsShowAnswer\n  } = _ref;\n  let isClick = false;\n  console.log(question);\n\n  const onClickAnswer = () => {\n    isClick = true;\n    setIsShowAnswer(true);\n    console.log(question);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ButtonConfig, {\n      isShowAnswer: isShowAnswer,\n      isClick: isClick,\n      answer: question[count - 1].answer === index,\n      onClick: () => onClickAnswer(),\n      children: question[count - 1].answerList[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n} // function Answer({index, question, count, setCount, isShowAnswer,setIsShowAnswer}) {\n//     return ( \n//         <>\n//         </>\n//     );\n// }\n\n\n_c2 = Answer;\nexport default Answer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonConfig\");\n$RefreshReg$(_c2, \"Answer\");","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/src/Components/Content/study/Answer.js"],"names":["Button","styled","css","ButtonConfig","button","p","isShowAnswer","isClick","isAnswer","Answer","index","question","count","setCount","setIsShowAnswer","console","log","onClickAnswer","answer","answerList"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,IAAgBC,GAAhB,QAA0B,mBAA1B;;;AAEA,MAAMC,YAAY,GAAGF,MAAM,CAACG,MAAO;AACnC,wBAAwBC,CAAC,IAAIA,CAAC,CAACC,YAAF,GAAiBD,CAAC,CAACE,OAAF,GAAaF,CAAC,CAACG,QAAF,GAAa,MAAb,GAAoB,KAAjC,GAA2CH,CAAC,CAACG,QAAF,GAAW,MAAX,GAAkB,OAA9E,GAA0F,OAAQ;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;KAAML,Y;;AAaN,SAASM,MAAT,OAAkF;AAAA,MAAlE;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,KAAlB;AAAyBC,IAAAA,QAAzB;AAAmCP,IAAAA,YAAnC;AAAgDQ,IAAAA;AAAhD,GAAkE;AAC9E,MAAIP,OAAO,GAAG,KAAd;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;;AAEA,QAAMM,aAAa,GAAG,MAAK;AACvBV,IAAAA,OAAO,GAAG,IAAV;AACAO,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACH,GAJD;;AAKA,sBACI;AAAA,2BACI,QAAC,YAAD;AACI,MAAA,YAAY,EAAIL,YADpB;AAEI,MAAA,OAAO,EAAIC,OAFf;AAGI,MAAA,MAAM,EAAII,QAAQ,CAACC,KAAK,GAAC,CAAP,CAAR,CAAkBM,MAAlB,KAA6BR,KAH3C;AAII,MAAA,OAAO,EAAG,MAAMO,aAAa,EAJjC;AAAA,gBAMKN,QAAQ,CAACC,KAAK,GAAC,CAAP,CAAR,CAAkBO,UAAlB,CAA6BT,KAA7B;AANL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAYH,C,CAED;AACA;AACA;AACA;AACA;AACA;;;MA5BSD,M;AA8BT,eAAeA,MAAf","sourcesContent":["import Button from '@atlaskit/button';\r\nimport styled, {css} from 'styled-components';\r\n\r\nconst ButtonConfig = styled.button`\r\n    background-color: ${p => p.isShowAnswer? (p.isClick ? (p.isAnswer ? \"blue\":\"red\") : (p.isAnswer?\"blue\":\"white\")) : \"white\"};\r\n    height: 100px;\r\n    width: 100%;\r\n    box-shadow: 1px 1px 8px;\r\n    padding: 30px;\r\n    border-radius: 10px;\r\n\r\n    &:hover{\r\n        background-color: #d6d6d6;\r\n    }\r\n`;\r\n\r\nfunction Answer({index, question, count, setCount, isShowAnswer,setIsShowAnswer}) {\r\n    let isClick = false;\r\n    console.log(question);\r\n\r\n    const onClickAnswer = () =>{\r\n        isClick = true;\r\n        setIsShowAnswer(true);\r\n        console.log(question);\r\n    }\r\n    return ( \r\n        <>\r\n            <ButtonConfig\r\n                isShowAnswer = {isShowAnswer}\r\n                isClick = {isClick}\r\n                answer = {question[count-1].answer === index}\r\n                onClick= {() => onClickAnswer()}\r\n            >\r\n                {question[count-1].answerList[index]}\r\n            </ButtonConfig>\r\n        </>\r\n    );\r\n}\r\n\r\n// function Answer({index, question, count, setCount, isShowAnswer,setIsShowAnswer}) {\r\n//     return ( \r\n//         <>\r\n//         </>\r\n//     );\r\n// }\r\n\r\nexport default Answer;"]},"metadata":{},"sourceType":"module"}