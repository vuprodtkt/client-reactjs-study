{"ast":null,"code":"var _jsxFileName = \"E:\\\\subjects\\\\ReactJS\\\\ReactJS\\\\example\\\\study\\\\client\\\\src\\\\Components\\\\Content\\\\study\\\\Answer.js\";\nimport Button from '@atlaskit/button';\nimport styled, { css } from 'styled-components'; // ${p => p.isShowAnswer? (p.isClick ? (p.isAnswer ? \"blue\":\"red\") : (p.isAnswer?\"blue\":\"white\")) : \"white\"}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ButtonConfig = styled.button`\n    background-color: ;\n    height: 100px;\n    width: 100%;\n    box-shadow: 1px 1px 8px;\n    padding: 30px;\n    border-radius: 10px;\n\n    &:hover{\n        background-color: #d6d6d6;\n    }\n`;\n_c = ButtonConfig;\n\nfunction Answer(_ref) {\n  let {\n    index,\n    question,\n    count,\n    setCount,\n    isShowAnswer\n  } = _ref;\n  let isClick = false;\n\n  const onClickAnswer = numAnswer => {\n    isClick = true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ButtonConfig, {\n      isShowAnswer: isShowAnswer,\n      isClick: isClick,\n      answer: question[count - 1].answer === index,\n      children: question[count - 1].answerList[index]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = Answer;\nexport default Answer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonConfig\");\n$RefreshReg$(_c2, \"Answer\");","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/src/Components/Content/study/Answer.js"],"names":["Button","styled","css","ButtonConfig","button","Answer","index","question","count","setCount","isShowAnswer","isClick","onClickAnswer","numAnswer","answer","answerList"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,IAAgBC,GAAhB,QAA0B,mBAA1B,C,CAEA;;;;AAEA,MAAMC,YAAY,GAAGF,MAAM,CAACG,MAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;KAAMD,Y;;AAaN,SAASE,MAAT,OAAkE;AAAA,MAAlD;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,KAAlB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA;AAAnC,GAAkD;AAC9D,MAAIC,OAAO,GAAG,KAAd;;AAEA,QAAMC,aAAa,GAAIC,SAAD,IAAc;AAChCF,IAAAA,OAAO,GAAG,IAAV;AACH,GAFD;;AAGA,sBACI;AAAA,2BACI,QAAC,YAAD;AACI,MAAA,YAAY,EAAID,YADpB;AAEI,MAAA,OAAO,EAAIC,OAFf;AAGI,MAAA,MAAM,EAAIJ,QAAQ,CAACC,KAAK,GAAC,CAAP,CAAR,CAAkBM,MAAlB,KAA6BR,KAH3C;AAAA,gBAKKC,QAAQ,CAACC,KAAK,GAAC,CAAP,CAAR,CAAkBO,UAAlB,CAA6BT,KAA7B;AALL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAWH;;MAjBQD,M;AAmBT,eAAeA,MAAf","sourcesContent":["import Button from '@atlaskit/button';\r\nimport styled, {css} from 'styled-components';\r\n\r\n// ${p => p.isShowAnswer? (p.isClick ? (p.isAnswer ? \"blue\":\"red\") : (p.isAnswer?\"blue\":\"white\")) : \"white\"}\r\n\r\nconst ButtonConfig = styled.button`\r\n    background-color: ;\r\n    height: 100px;\r\n    width: 100%;\r\n    box-shadow: 1px 1px 8px;\r\n    padding: 30px;\r\n    border-radius: 10px;\r\n\r\n    &:hover{\r\n        background-color: #d6d6d6;\r\n    }\r\n`;\r\n\r\nfunction Answer({index, question, count, setCount, isShowAnswer}) {\r\n    let isClick = false;\r\n\r\n    const onClickAnswer = (numAnswer) =>{\r\n        isClick = true;\r\n    }\r\n    return ( \r\n        <>\r\n            <ButtonConfig\r\n                isShowAnswer = {isShowAnswer}\r\n                isClick = {isClick}\r\n                answer = {question[count-1].answer === index}\r\n            >\r\n                {question[count-1].answerList[index]}\r\n            </ButtonConfig>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answer;"]},"metadata":{},"sourceType":"module"}