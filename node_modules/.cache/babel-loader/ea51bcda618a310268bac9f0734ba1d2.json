{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { memo } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport { useGlobalTheme } from '@atlaskit/theme/components';\nimport { getBackground } from './utils';\nimport { commonSVGStyles, getIconSize } from './styles';\n/**\n * We are hiding these props from consumers as they're used to\n * hack around icon sizing specifically for icon-file-type.\n */\n\nvar iconStyles = css({\n  display: 'inline-block',\n  flexShrink: 0,\n  lineHeight: 1,\n  // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n  '> svg': _objectSpread(_objectSpread({}, commonSVGStyles), {}, {\n    maxWidth: '100%',\n    maxHeight: '100%',\n    color: 'var(--icon-primary-color)',\n    fill: 'var(--icon-secondary-color)',\n    verticalAlign: 'bottom'\n  })\n});\n/**\n * For windows high contrast mode\n */\n\nvar baseHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      filter: 'grayscale(1)',\n      '--icon-primary-color': 'CanvasText',\n      // foreground\n      '--icon-secondary-color': 'Canvas' // background\n\n    }\n  }\n});\nvar primaryEqualsSecondaryHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      // if the primaryColor is the same as the secondaryColor we\n      // set the --icon-primary-color to Canvas\n      // this is usually to convey state i.e. Checkbox checked -> not checked\n      '--icon-primary-color': 'Canvas' // foreground\n\n    }\n  }\n});\nvar secondaryTransparentHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      '--icon-secondary-color': 'transparent' // background\n\n    }\n  }\n});\n/**\n * __Icon__\n *\n * An icon is used as a visual representation of common actions and commands to provide context.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)\n */\n\nexport var Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _ref = props,\n      Glyph = _ref.glyph,\n      dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n      _ref$primaryColor = _ref.primaryColor,\n      primaryColor = _ref$primaryColor === void 0 ? 'currentColor' : _ref$primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      size = _ref.size,\n      testId = _ref.testId,\n      label = _ref.label,\n      width = _ref.width,\n      height = _ref.height;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: dangerouslySetGlyph\n    }\n  } : {\n    children: Glyph ? jsx(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  var dimensions = getIconSize({\n    width: width,\n    height: height,\n    size: size\n  });\n\n  var _useGlobalTheme = useGlobalTheme(),\n      mode = _useGlobalTheme.mode;\n\n  return jsx(\"span\", _extends({\n    \"data-testid\": testId,\n    role: label ? 'img' : 'presentation',\n    \"aria-label\": label ? label : undefined,\n    \"aria-hidden\": label ? undefined : true,\n    style: {\n      '--icon-primary-color': primaryColor,\n      '--icon-secondary-color': secondaryColor || getBackground(mode)\n    }\n  }, glyphProps, {\n    css: [iconStyles, baseHcmStyles, primaryColor === secondaryColor && primaryEqualsSecondaryHcmStyles, secondaryColor === 'transparent' && secondaryTransparentHcmStyles, // NB: This can be resolved if this component, composes base SVG / and/or skeleton\n    // We could then simplify how common styles are dealt with simply by encapsualting them\n    // at their appropriate level and/or having a singular approach to css variables in the package\n    dimensions && // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n    css({\n      width: dimensions.width,\n      height: dimensions.height,\n      '> svg': dimensions\n    })]\n  }));\n});\nexport default Icon;","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/vocabulary/node_modules/@atlaskit/icon/dist/esm/components/icon.js"],"names":["_extends","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","memo","css","jsx","useGlobalTheme","getBackground","commonSVGStyles","getIconSize","iconStyles","display","flexShrink","lineHeight","maxWidth","maxHeight","color","fill","verticalAlign","baseHcmStyles","primaryEqualsSecondaryHcmStyles","secondaryTransparentHcmStyles","Icon","props","_ref","Glyph","glyph","dangerouslySetGlyph","_ref$primaryColor","primaryColor","secondaryColor","size","testId","label","width","height","glyphProps","dangerouslySetInnerHTML","__html","children","role","dimensions","_useGlobalTheme","mode","undefined","style"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n/** @jsx jsx */\nimport { memo } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport { useGlobalTheme } from '@atlaskit/theme/components';\nimport { getBackground } from './utils';\nimport { commonSVGStyles, getIconSize } from './styles';\n/**\n * We are hiding these props from consumers as they're used to\n * hack around icon sizing specifically for icon-file-type.\n */\n\nvar iconStyles = css({\n  display: 'inline-block',\n  flexShrink: 0,\n  lineHeight: 1,\n  // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n  '> svg': _objectSpread(_objectSpread({}, commonSVGStyles), {}, {\n    maxWidth: '100%',\n    maxHeight: '100%',\n    color: 'var(--icon-primary-color)',\n    fill: 'var(--icon-secondary-color)',\n    verticalAlign: 'bottom'\n  })\n});\n/**\n * For windows high contrast mode\n */\n\nvar baseHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      filter: 'grayscale(1)',\n      '--icon-primary-color': 'CanvasText',\n      // foreground\n      '--icon-secondary-color': 'Canvas' // background\n\n    }\n  }\n});\nvar primaryEqualsSecondaryHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      // if the primaryColor is the same as the secondaryColor we\n      // set the --icon-primary-color to Canvas\n      // this is usually to convey state i.e. Checkbox checked -> not checked\n      '--icon-primary-color': 'Canvas' // foreground\n\n    }\n  }\n});\nvar secondaryTransparentHcmStyles = css({\n  '@media screen and (forced-colors: active)': {\n    // eslint-disable-next-line @repo/internal/styles/no-nested-styles\n    '> svg': {\n      '--icon-secondary-color': 'transparent' // background\n\n    }\n  }\n});\n/**\n * __Icon__\n *\n * An icon is used as a visual representation of common actions and commands to provide context.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)\n */\n\nexport var Icon = /*#__PURE__*/memo(function Icon(props) {\n  var _ref = props,\n      Glyph = _ref.glyph,\n      dangerouslySetGlyph = _ref.dangerouslySetGlyph,\n      _ref$primaryColor = _ref.primaryColor,\n      primaryColor = _ref$primaryColor === void 0 ? 'currentColor' : _ref$primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      size = _ref.size,\n      testId = _ref.testId,\n      label = _ref.label,\n      width = _ref.width,\n      height = _ref.height;\n  var glyphProps = dangerouslySetGlyph ? {\n    dangerouslySetInnerHTML: {\n      __html: dangerouslySetGlyph\n    }\n  } : {\n    children: Glyph ? jsx(Glyph, {\n      role: \"presentation\"\n    }) : null\n  };\n  var dimensions = getIconSize({\n    width: width,\n    height: height,\n    size: size\n  });\n\n  var _useGlobalTheme = useGlobalTheme(),\n      mode = _useGlobalTheme.mode;\n\n  return jsx(\"span\", _extends({\n    \"data-testid\": testId,\n    role: label ? 'img' : 'presentation',\n    \"aria-label\": label ? label : undefined,\n    \"aria-hidden\": label ? undefined : true,\n    style: {\n      '--icon-primary-color': primaryColor,\n      '--icon-secondary-color': secondaryColor || getBackground(mode)\n    }\n  }, glyphProps, {\n    css: [iconStyles, baseHcmStyles, primaryColor === secondaryColor && primaryEqualsSecondaryHcmStyles, secondaryColor === 'transparent' && secondaryTransparentHcmStyles, // NB: This can be resolved if this component, composes base SVG / and/or skeleton\n    // We could then simplify how common styles are dealt with simply by encapsualting them\n    // at their appropriate level and/or having a singular approach to css variables in the package\n    dimensions && // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n    css({\n      width: dimensions.width,\n      height: dimensions.height,\n      '> svg': dimensions\n    })]\n  }));\n});\nexport default Icon;"]},"metadata":{},"sourceType":"module"}