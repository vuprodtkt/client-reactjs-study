{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\n * Focusing on the passed element ref after initial mount.\n * Will only focus on initial mount.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus\n *\n * ```tsx\n * import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';\n *\n * const elementRef = useRef();\n * useAutoFocus(elementRef, true);\n *\n * <button ref={elementRef} />;\n * ```\n *\n * @param ref\n * @param autoFocus\n */\n\nexport default function useAutoFocus(ref, autoFocus) {\n  var initialMount = useRef(true);\n  useEffect(function () {\n    if (ref && initialMount.current && autoFocus && ref.current) {\n      ref.current.focus();\n    }\n\n    initialMount.current = false;\n  }, [autoFocus, ref]);\n}","map":{"version":3,"sources":["E:/subjects/ReactJS/ReactJS/example/study/client/node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-auto-focus.js"],"names":["useEffect","useRef","useAutoFocus","ref","autoFocus","initialMount","current","focus"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,SAA3B,EAAsC;AACnD,MAAIC,YAAY,GAAGJ,MAAM,CAAC,IAAD,CAAzB;AACAD,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIG,GAAG,IAAIE,YAAY,CAACC,OAApB,IAA+BF,SAA/B,IAA4CD,GAAG,CAACG,OAApD,EAA6D;AAC3DH,MAAAA,GAAG,CAACG,OAAJ,CAAYC,KAAZ;AACD;;AAEDF,IAAAA,YAAY,CAACC,OAAb,GAAuB,KAAvB;AACD,GANQ,EAMN,CAACF,SAAD,EAAYD,GAAZ,CANM,CAAT;AAOD","sourcesContent":["import { useEffect, useRef } from 'react';\n/**\n * Focusing on the passed element ref after initial mount.\n * Will only focus on initial mount.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/autofocus\n *\n * ```tsx\n * import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';\n *\n * const elementRef = useRef();\n * useAutoFocus(elementRef, true);\n *\n * <button ref={elementRef} />;\n * ```\n *\n * @param ref\n * @param autoFocus\n */\n\nexport default function useAutoFocus(ref, autoFocus) {\n  var initialMount = useRef(true);\n  useEffect(function () {\n    if (ref && initialMount.current && autoFocus && ref.current) {\n      ref.current.focus();\n    }\n\n    initialMount.current = false;\n  }, [autoFocus, ref]);\n}"]},"metadata":{},"sourceType":"module"}