"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _colors = require("@atlaskit/theme/colors");

var _components = require("@atlaskit/theme/components");

var _constants = require("./constants");

/** @jsx jsx */

/**
 * Returns the appropriate circle stroke color.
 */
function getStrokeColor(_ref) {
  var mode = _ref.mode,
      appearance = _ref.appearance;

  if (mode === 'light') {
    return appearance === 'inherit' ? "var(--ds-text-subtle, ".concat(_colors.N500, ")") : "var(--ds-text-inverse, ".concat(_colors.N0, ")");
  }

  return appearance === 'inherit' ? "var(--ds-text-subtle, ".concat(_colors.DN900, ")") : "var(--ds-text-inverse, ".concat(_colors.DN500, ")");
}

var rotate = (0, _core.keyframes)({
  to: {
    transform: 'rotate(360deg)'
  }
});
var rotateStyles = (0, _core.css)({
  animation: "".concat(rotate, " 0.86s infinite"),
  animationTimingFunction: 'cubic-bezier(0.4, 0.15, 0.6, 0.85)',
  transformOrigin: 'center'
});
/**
 * There are three parts to the load in animation:
 * 1. Fade in
 * 2. Accelerated spin
 * 3. Stretch the spinner line
 */

var loadIn = (0, _core.keyframes)({
  from: {
    transform: 'rotate(50deg)',
    opacity: 0,
    strokeDashoffset: 60
  },
  to: {
    transform: 'rotate(230deg)',
    opacity: 1,
    strokeDashoffset: 50
  }
});
var loadInStyles = (0, _core.css)({
  animation: "".concat(loadIn, " 1s ease-in-out"),

  /**
   * When the animation completes, stay at the last frame of the animation.
   */
  animationFillMode: 'forwards',

  /**
   * We are going to animate this in.
   */
  opacity: 0
});
var wrapperStyles = (0, _core.css)({
  display: 'inline-flex',

  /**
   * Align better inline with text.
   */
  verticalAlign: 'middle'
});
var circleStyles = (0, _core.css)({
  fill: 'none',
  strokeDasharray: 60,
  strokeDashoffset: 'inherit',
  strokeLinecap: 'round',
  strokeWidth: 1.5,
  '@media screen and (forced-colors: active)': {
    filter: 'grayscale(100%)',
    stroke: 'CanvasText'
  }
});

var _default = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(function Spinner(_ref2, ref) {
  var testId = _ref2.testId,
      _ref2$appearance = _ref2.appearance,
      appearance = _ref2$appearance === void 0 ? 'inherit' : _ref2$appearance,
      _ref2$delay = _ref2.delay,
      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
      _ref2$size = _ref2.size,
      providedSize = _ref2$size === void 0 ? 'medium' : _ref2$size;
  var size = typeof providedSize === 'number' ? providedSize : _constants.presetSizes[providedSize];
  var animationDelay = "".concat(delay, "ms");

  var _useGlobalTheme = (0, _components.useGlobalTheme)(),
      mode = _useGlobalTheme.mode;

  var stroke = getStrokeColor({
    mode: mode,
    appearance: appearance
  });
  /**
   * The Spinner animation uses a combination of two
   * css animations on two separate elements.
   */

  return (0, _core.jsx)("span", {
    /**
     * This span exists to off-load animations from the circle element,
     * which were causing performance issues (style recalculations)
     * on Safari and older versions of Chrome.
     *
     * This can be removed and styles placed back on the circle element once
     * Safari fixes this bug and off-loads rendering to the GPU from the CPU.
     */
    css: [wrapperStyles, rotateStyles],
    "data-testid": testId && "".concat(testId, "-wrapper"),
    style: {
      animationDelay: animationDelay,
      width: size,
      height: size
    }
  }, (0, _core.jsx)("svg", {
    height: size,
    width: size,
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg",
    "data-testid": testId,
    ref: ref,
    css: loadInStyles,
    style: {
      animationDelay: animationDelay
    }
  }, (0, _core.jsx)("circle", {
    cx: "8",
    cy: "8",
    r: "7",
    css: circleStyles,
    style: {
      stroke: stroke
    }
  })));
}));

exports.default = _default;